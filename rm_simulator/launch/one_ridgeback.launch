<?xml version="1.0"?>

<launch>
  <arg name="robot_name"                default="ridgeback"/>
  <arg name="init_x"                    default="1"/>
  <arg name="init_y"                    default="2"/>
  <arg name="init_a"                    default="0"/>
  <arg name="ns"                        default="jackal0"/>
  <arg name="config"                    default="empty" />
  <arg name="node_namespace" 		        default="jackal0"/>
  <arg name="groundtruth_topic"         default="ground_truth/state"/>
  <param name="/$(arg ns)/robot_description"
         command="$(find ridgeback_description)/scripts/env_run
                  $(find ridgeback_description)/urdf/configs/$(arg config)
                  $(find xacro)/xacro '$(find ridgeback_description)/urdf/ridgeback.urdf.xacro'
                  '--inorder' 'namespace:=$(arg ns) groundtruth_topic:=$(arg groundtruth_topic)'" />

  <!-- Spawn Ridgeback -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" ns="$(arg ns)"
        args="-x $(arg init_x) -y $(arg init_y) -z 0.02 -Y $(arg init_a)
        -urdf -model $(arg ns) -param /$(arg ns)/robot_description" />

  <!-- Publish the robot joints. -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" ns="$(arg ns)">
    <param name="tf_prefix"         value="$(arg ns)"/>
    <param name="robot_description" value="/$(arg ns)/robot_description"/>
  </node>

  <!-- Ground truth tf2 broadcaster -->
  <node pkg="rm_simulator" type="ground_truth_tf2_broadcaster" name="ground_truth" ns="$(arg ns)">
    <param name="groundTruthTopic" value="/$(arg ns)/$(arg groundtruth_topic)" />
    <param name="frame_id" value="map" />
    <param name="child_frame_id" value="/$(arg ns)/ground_truth" />
  </node>

  <node pkg="tf" type="static_transform_publisher" name="front_armor"
      args="0.3 0 0.1 0 0 0 /$(arg ns)/ground_truth /$(arg ns)/front_armor 10" ns="$(arg ns)"/>

   <node pkg="tf" type="static_transform_publisher" name="back_armor"
      args="-0.3 0 0.1 0 0 0 /$(arg ns)/ground_truth /$(arg ns)/back_armor 10" ns="$(arg ns)"/>

  <node pkg="tf" type="static_transform_publisher" name="left_armor"
      args="0 0.225 0.1 0 0 0 /$(arg ns)/ground_truth /$(arg ns)/left_armor 10" ns="$(arg ns)"/>

  <node pkg="tf" type="static_transform_publisher" name="right_armor"
      args="0 -0.225 0.1 0 0 0 /$(arg ns)/ground_truth /$(arg ns)/right_armor 10" ns="$(arg ns)"/>
  
  <node pkg="tf" type="static_transform_publisher" name="ground_truth_base_link" ns="$(arg ns)"
      args="0 0 0 0 0 0 1 /$(arg ns)/ground_truth /$(arg ns)/ground_truth/base_link 150"/>

  <node name="robot_state_publisher_ground_truth" pkg="robot_state_publisher" type="robot_state_publisher" ns="$(arg ns)">
    <param name="tf_prefix"         value="$(arg ns)/ground_truth"/>
    <param name="robot_description" value="/$(arg ns)/robot_description"/>
  </node>
  

  <include file="$(find ridgeback_control)/launch/control.launch">
           <arg name = "ns" value="$(arg ns)" />
  </include>

  <include file="$(find ridgeback_control)/launch/teleop.launch">
    <arg name="joystick" value="false"/>
    <arg name="ns" value="$(arg ns)"/>
  </include>

  <include file="$(find obstacle_detector)/launch/demo.launch">
    <arg name="node_namespace" value="$(arg node_namespace)"/>
  </include>

  <rosparam param="/$(arg ns)/gazebo_ros_control/pid_gains">
    front_left_wheel:
      p: 1
      i: 0.1
      d: 0
    front_right_wheel:
      p: 1
      i: 0.1
      d: 0
    rear_left_wheel:
      p: 1
      i: 0.1
      d: 0
    rear_right_wheel:
      p: 1
      i: 0.1
      d: 0
    front_camera_pivot_joint:
      p: 80
      i: 10
      d: 10
    front_turret_joint:
      p: 80
      i: 10
      d: 10
  </rosparam>

  <node name="turret_controller" pkg="rm_simulator" type="turret_controller" ns="$(arg ns)">
    <remap from="/turret_yaw_controller/command"  to="turret_yaw_controller/command"/>
    <remap from="/turret_pitch_controller/command"  to="turret_pitch_controller/command"/>
    <remap from="/turret_position"  to="turret_position"/>
  </node>

<!--   <include file="$(find rm_simulator)/launch/include/amcl_ridgeback.launch">-->
<!--     <arg name="ns"             value="$(arg ns)"/>-->
<!--     <arg name="x"              value="$(arg init_x)"/>-->
<!--     <arg name="y"              value="$(arg init_y)"/>-->
<!--     <arg name="use_map_topic"  value="true"/>-->
<!--     <arg name="scan_topic"     value="scan" />-->
<!--   </include>-->

<!--  <include file="$(find rm_simulator)/launch/include/move_base.launch">-->
<!--    <arg name="ns"             value="$(arg ns)"/>-->
<!--  </include>-->

  <!-- <node pkg="roborts_planning" type="global_planner_node" name="global_planner_node" respawn="false" output="screen" ns="$(arg ns)">
    <param name="jackal_ns"         value="$(arg ns)"/>
  </node> -->

  <!-- Run the local planner node -->
  <!-- <node pkg="roborts_planning" type="local_planner_node" name="local_planner_node" respawn="false" output="screen" ns="$(arg ns)">
    <remap from="$(arg ns)/odom"                                to="odometry/filtered"/>
    <remap from="/cmd_vel_acc"                                  to="/$(arg ns)/cmd_vel_acc" />
    <remap from="/local_planner_node_action/feedback"           to="/$(arg ns)/local_planner_node_action/feedback" />
    <remap from="/local_planner_node_action/result"             to="/$(arg ns)/local_planner_node_action/result" />
    <remap from="/local_planner_node_action/status"             to="/$(arg ns)/local_planner_node_action/status" />
    <remap from="/local_planner_node_action/goal"               to="/$(arg ns)/local_planner_node_action/goal" />
    <remap from="/local_planner_node_action/cancel"             to="/$(arg ns)/local_planner_node_action/cancel" />
    <param name="jackal_ns"                                     value="$(arg ns)"/>
  </node> -->

  <!-- <node name="behavior_test_node" pkg="roborts_decision" type="behavior_test_node" output="screen" ns="$(arg ns)">
    <remap from="/move_base_simple/goal" to="/$(arg ns)/move_base_simple/goal" />
    <param name="jackal_ns"         value="$(arg ns)"/>
  </node> -->

<!--   <node name="acc2vel_node" pkg="rm_simulator" type="acc2vel_node" respawn="false" ns="$(arg ns)"/> -->


<!--  RoboRTS does not support multi robot navigate, deprecated-->

  <!--Load parameters for localization node  -->
    <rosparam command="load" file="$(find roborts_localization)/config/localization.yaml" ns="$(arg ns)"/>
    <param name="$(arg ns)/odom_frame"           value="/$(arg ns)/odom"/>
    <param name="$(arg ns)/base_frame"           value="/$(arg ns)/base_link"/>
    <param name="/$(arg ns)/initial_pose_a"      value="$(arg init_a)"/>
    <param name="/$(arg ns)/initial_pose_x"      value="$(arg init_x)"/>
    <param name="/$(arg ns)/initial_pose_y"      value="$(arg init_y)"/>

    <rosparam command="load" file="$(find roborts_localization)/amcl/config/amcl.yaml" ns="$(arg ns)"/>

  <!-- Run the localization node -->
    <node pkg="roborts_localization" type="localization_node" name="localization_node" respawn="false" output="screen" ns="$(arg ns)">
      <param name="laser_topic_name"    value="$(arg ns)/scan"/>
      <remap from="static_map"          to="/static_map"/>
    </node>

</launch>
